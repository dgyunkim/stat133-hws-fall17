```
Find out how to make another scatterplot of height and weight, using geom_text() to display the names of the players
```{r}
ggplot(data = gsw, aes(x= height, y = weight)) + geom_point() + geom_text(aes(label = player))
```
Get a scatter plot of height and weight, for ALL the warriors, displaying their names with geom_label()
```{r}
all_gsw <- select(filter(dat, team == 'GSW'), player, height, weight)
ggplot(data = all_gsw, aes(x = height, y = weight)) + geom_point() + geom_text(aes(label = player))
```
Get a density plot of salary (for all NBA players)
```{r}
```
Get a histogram of points2 with binwidth of 50 (for all NBA players)
Get a barchart of the position frequencies (for all NBA players)
Make a scatterplot of experience and salary of all centers, and use geom_smooth() to add a regression line
Repeat the same scatterplot of experience and salary of all centers, but now use geom_smooth() to add a loess line
Make scatterplots of experience and salary faceting by position
Make scatterplots of experience and salary faceting by team
Make density plots of age faceting by team
Make scatterplots of height and weight faceting by position
Make scatterplots of height and weight, with a 2-dimensional density, geom_density2d(), faceting by position
log(-2)
dat <- data.frame()
dat <- data.frame(
col1 = LETTERS[1:5],
col2 = seq(from = 10, to = 50, by = 10),
col3 = c(TRUE, TRUE, FALSE, TRUE, FALSE)
)
dat
dat
dat$1
dat[1]
dat[[1]]
dat <- data.frame(
col1 = LETTERS[1:5],
col2 = seq(from = 10, to = 50, by = 10),
col3 = c(TRUE, TRUE, FALSE, TRUE, FALSE),
stringsAsFactors = FALSE
)
dat
class(dat$col1)
class[[1]]
dat[[1]]
dat[1]
dat[1, ]
dat[,1]
dat[1]
dat[col1]
dat["col1"]
dat$col1
dat$col4
name <- c("first", "last", "gender", "born", "spell")
df <- data.frame(
)
first <- c("Harry", "Hermione", "Ron", "Luna")
last <- c("Potter", "Granger", "Weasley", "Lovegood")
gender <- c("male", "female", "male", "female")
born <- c(1980, 1979, 1980, 1981)
spell <- c("sectumsempra", "alohomora", "riddikulus", "episkey")
df <- data.frame(first, last, gender, born, spell, stringAsFactor = FALSE)
df
df <- data.frame(first, last, gender, born, spell, stringsAsFactor = FALSE)
df
df <- data.frame(first, last, gender, born, spell, stringsAsFactors = FALSE)
df
df[c(1, 0, 1, 0)]
df[c(1, 0, 1, 0), ]
df[c(TRUE, FALSE, TRUE, FALSE), ]
df[c(TRUE, FALSE, TRUE, FALSE) ]
df[df[,4] == 1980,]
df[df$born == 1980]
df[df$born == 1980]
df$born == 1980
df[df$born == 1980,]
df[df$born == 1980]
df[df$born == 1980,]
df[, df$born == 1980]
1 & 2
df[1:3, TRUE]
df[1:3, FALSE]
df[1:3, ]
df[1:3, 1:2]
df[, c(5,1)]
rm(dat)
ls()
df
my_list <- list(
col1 = LETTERS[1:5],
col2 = seq(from = 10, to = 50, by = 10),
col3 = c(TRUE, TRUE, FALSE, TRUE, FALSE)
)
my_table2 <- data.frame(my_list)
my_table2
my_table1 <- data.frame(
col1 = LETTERS[1:5],
col2 = seq(from = 10, to = 50, by = 10),
col3 = c(TRUE, TRUE, FALSE, TRUE, FALSE)
)
my_table1
class(my_table1)
class(my_table2)
?attribute
?attributes
df
df[c("last", "first", "spell", "born")]
df
names(df[2]) <- "Family"
df
df[2]
names(df)
arrtibutes(df)
attributes(df)
attributes(df)$names[2] <- "Family"
df
attributes(df)
attributes(df)$row.names[2] <- "Two"
df
df
dfdf
df
attributes(df)$class <- list()
?order
?sort
?%>%
??%>%
?dplyr
library(dplyr)
?%>%
?dplyr
df
df%>% filter(gender == "female")
df
sw
df
filter(genter == "male")
filter(gender == "male")
filter(gender)
filter(dt, gender == "male")
filter(df, gender == "male")
df
arrange(select(df, first, gender, born), born)
df%>%select(first, gender, born)%>%arrange(born)
df%>%select(born)$>$summarise(max_born = max(born))
df%>%select(born)%>%summarise(max_born = max(born))
df
df%>%group_by(gender)%>%summarise(max_born = max(born))
summarise(df, group_by(gender), max_born = max(born))
summarise(group_by(df, gender), max_born = max(born))
3xalqo <- 12
_30d0_dl <- 12
.sdowk <- 123213
.sdowk3
.sdowk
.var_name <- "name"
.var_name
VarName <- yes
VarName <- 123
var-name <- 123
math+doq <- 12
log10
log(10)/(5/2 - log(2/3))
(1/2)^10
log(3/2)
(log(1/10)-1/2)/log(2/3)
(log(1/10) - 5) / log(2/3)
exp(-10)
exp(-10)*1000
14!
factanal(14)
factorial(14)
10^14/factorial(14)
exp(-10)*1147
(2*log(1.4)+3)*0.1
2*log(1)+1
2.4*log(1.2)+1.2
2.4*log(1.2)+1.2 - 0.5465
1.2625 - 1.0000
(1.2625 - 1.0000)/2
(1.2625 - 1.0000)/0.2
(1.6595-1.2625)/0.2
(1.6595-1.2625)
(1.6595-1.2625)/0.2
2.4*log(1.2)+1.2 - 1.985
2.8*log(1.4)+1.4 - 1.985
exp(-2)
exp(0.4)
exp(-0.4)
-1.645*sqrt(1/12)+1/2
(-1.645*sqrt(1/12)+1/2)*2
1/[(-1.645*sqrt(1/12)+1/2)*2]
1/((-1.645*sqrt(1/12)+1/2)*2)
1/((-1.645*sqrt(1/12)+1/2)*2)*2
1/(1/((-1.645*sqrt(1/12)+1/2)*2)*2)
c("c", TRUE, 0)
c(0, TURE)
c(0, TRUE)
mode(c(0, TRUE))
typeof(c(0, TRUE))
typeof(c(1L, TRUE))
c(4L, TRUE)
typeofc(4L, TRUE)
typeof(c(4L, TRUE))
as.logocial(c(1, 0, 1, 0))
as.logical(c(1, 0, 1, 0))
as.character(c(1, 0, 1, 0))
as.character(c("c", 0, 1, 0))
as.logical(c("c", 0, 1, 0))
as.numeric(c("c", 0, 1, 0))
as.logical(c("c", 0, 1, 0))
f <- factor(c("c", 0, 1, 0))
f
mode(f)
summaryf
summary(f)
is.atomic(f)
class(f)
str(f)
df <- data.frame(col(
n = c(1, 2, 3),
))
df <- data.frame(col(
n = c(1, 2, 3),
c = c("c", "d", "f"),
l = c(TRUE, FALSE, FALSE)
))
df <- data.frame(list(
n = c(1, 2, 3),
c = c("c", "d", "f"),
l = c(TRUE, FALSE, FALSE)
))
df
df[,]
df[]
df[1,]
df[1]
df[,]
df[,1]
df$n
?rep
rep(1:3, each = "c")
rep(1:3, each = FALSE)
rep(1:3, each = TRUE)
rep(1:3, each = 2.5)
rep(1:3, each = 1.5)
rep(1:3, each = 3.5)
rep(1:3, each = 2)
matrix(1:12)
matrix(1:12, nrow = 4)
matrix(1:12, nrow = 4, byrow = TRUE)
matrix(1:12, nrow = 4)
?colon
a:c
1:2
"a":"c"
LETTERS[1:5}]
LETTERS[1:5]
letters[1:5]
?read.table
ncol(df)
nrow(df)
df
summary(df)
df[c(TRUE, FALSE),]
wd <- data.frame(list(
name = c("Anakin", "Padme", "Luke", "Leia"),
))
wd <- data.frame(list(
name = c("Anakin", "Padme", "Luke", "Leia"),
gender = rep(c("male", "female", 2)),
height = c(1.88, 1.65, 1.72, 1.50),
weight = c(84, 45, 77, 49)
))
wd <- data.frame(list(
name = c("Anakin", "Padme", "Luke", "Leia"),
gender = rep(c("male", "female"), 2),
height = c(1.88, 1.65, 1.72, 1.50),
weight = c(84, 45, 77, 49)
))
wd
wd %>% summarise(avg_hieght = mean(height))
library(dplyr)
wd %>% summarise(avg_hieght = mean(height))
wd %>% group_by(gender) %>% summarise(avg_weight = mean(weight))
mode(wd %>% group_by(gender) %>% summarise(avg_weight = mean(weight)))
str(wd %>% group_by(gender) %>% summarise(avg_weight = mean(weight)))
summary(wd %>% group_by(gender) %>% summarise(avg_weight = mean(weight)))
2*exp(2.2)+(2.2)*exp(2.2)
fct <- function(x){}
fct <- function(x){
2^x*sin(x)
}
(fct(1.45) - fct(1.05))/0.4
(fct(1.25) - fct(1.05))/0.2
(fct(1.15) - fct(1.05))/0.1
2*2.305-2.29
2*2.295-2.305
2.285+1/3(2.285-2.32)
2.285+(2.285-2.32)/3
(fct(1.1) - fct(1.05))/0.05
2*2.2864-2.295
2.2778 + (2.2778-2.285)/3
2.2754+(2.2754-2.2733)/7
sin(3*pi/2)
−0.4879837+(−0.4879837-2.356194)/3
−0.4879837+(-0.4879837-2.356194)/3
-0.4879837+(-0.4879837-2.356194)/3
-0.4879837+(-0.4879837-2.356194)/3
-0.8815732+(-0.8815732 + 0.4879837)/3
-0.9709157+(-0.9709157 +0.8815732)/3
-1.01277+(-1.01277 +1.436043)/15
-1.000697+(-1.000697 + 1.01277)/15
2^6-1
-0.9998921+( -0.9998921 + 0.9998921)/63
1/4+1-2*sin(pi/4)
1/8+1-2*sin(pi/8)
(1/4+1/8)/2
3/16
fct <- function(x){
x+1-2*sin(pi*x)
}
fct(3/16)
fct(7/32)
fct(13/64)
fct(27/128)
fct(53/256)
log(2, base = 10)
log(2)
5/log(2, base = 10)
fct <- function(x){
tan(x) - x
}
fct(0)
fct(1)
fct(2)
fct(3)
fct <- function(x){
(x+2)*(x+1)^2*x*(x-1)^3*(x-2)
}
x = seq(-10, 10, 1)
x
y <- fct(x)
y
plot(x, y)
x <- seq(-3, 3, 0.1)
y <- fct(x)
plot(x,y)
plot(x,y, ylim = c(-5, 5))
fct(-1.5)
fct(2.5)
fct(0.5)
fct(-0.5)
fct(0)
fct(2.4)
fct((2.4-0.5)/2)
(2.4-0.5)/2
0.45/2
fct(0.225)
-0.5+0.225
(-0.5+0.225)/2
fct(-0.1375)
fct(1.25)
4.25/2
fct(2.125)
(2.125+1.25)/2
fct(1.6875)
-3-0.5
-3/5/2
-3.5/2
fct(-1.75)
fct(-3.5)
-3.5-1.75
-5.25/2
fct(-2.625)
exp(20)
exp(10)
exp(-1)
26.119/15
5.629/15
setwd("/Users/donggyun/Desktop/STAT 133/stat133-hws-fall17/hw03/")
library(readr)
library(dplyr)
library(ggplot2)
roster <- read_csv("./data/nba2017-roster.csv")
stats <- read_csv("./data/nba2017-stats.csv")
summary(roster)
mode(roster$position)
mode(roster$height)
mode(roster$weight)
mode(roster$age)
mode(roster$experience)
mode(roster$salary)
summary(roster$position)
roster%position
roster$position
attribute(roster$player)
attributes(roster$player)
attributes(roster$position)
summary(stats)
mode(stats$games_played)
mode(stats$minutes)
mode(stats$field_goals_made)
mode(stats$field_goals_made)
mode(stats$field_goals_atts)
mode(stats$field_goals_perc)
stats <- stats %>% mutate(missed_fg = field_goals_atts - field_goals_made) # missed field goals
stats <- stats %>% mutate(missed_ft = points1_atts - points1_made) # missed free throws
stats <- stats %>% mutate(points = 3*points3_made + 2*points2_made + points1_made) # total points
stats <- stats %>% mutate(rebounds = off_rebounds + def_rebounds) # rebounds
stats <- stats %>% mutate(efficiency = (points + rebounds + assists + steals +
blocks - missed_fg - missed_ft - turnovers) / games_played) # efficiency
sink("./output/effiency-summary.txt")
summary(stats$efficiency)
sink()
roster_stats <- roster %>%
inner_join(stats)
teams <- roster_stats %>%
group_by(team) %>%
summarise(weight = round(mean(weight), 2), height = round(mean(height), 2), experience = sum(experience),
salary = round(sum(salary) / 1000000, 2), age = sum(age),
points3 = sum(points3_made), points2 = sum(points2_made),
free_throws = sum(points1_made), points = sum(points),
points3_perc = mean(points3_perc), points2_perc = mean(points2_perc),
points1_perc = mean(points1_perc), off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds), assists = sum(assists),
steals = sum(steals), blocks = sum(blocks), turnovers = sum(turnovers),
fouls = sum(fouls), efficiency = sum(efficiency))
summary(teams)
teams <- roster_stats %>%
group_by(team) %>%
summarise(experience = sum(experience), salary = round(sum(salary) / 1000000, 2),
points3 = sum(points3_made), points2 = sum(points2_made),
free_throws = sum(points1_made), points = sum(points),
off_rebounds = sum(off_rebounds), def_rebounds = sum(def_rebounds),
assists = sum(assists), steals = sum(steals),
blocks = sum(blocks), turnovers = sum(turnovers),
fouls = sum(fouls), efficiency = sum(efficiency))
rm(teams)
teams <- roster_stats %>%
group_by(team) %>%
summarise(experience = sum(experience), salary = round(sum(salary) / 1000000, 2),
points3 = sum(points3_made), points2 = sum(points2_made),
free_throws = sum(points1_made), points = sum(points),
off_rebounds = sum(off_rebounds), def_rebounds = sum(def_rebounds),
assists = sum(assists), steals = sum(steals),
blocks = sum(blocks), turnovers = sum(turnovers),
fouls = sum(fouls), efficiency = sum(efficiency))
summary(teams)
sink("./output/teams-summary.txt")
summary(teams)
sink()
a
write_csv(teams, "./data/nba2017_teams.csv")
pdf("./images/teams_star_plot.pdf")
stars(teams[, -1], labels = teams$team)
dev.off()
pdf("./images/experience_salary.pdf")
ggplot(data = teams, aes(x = experience, y = salary))+geom_point()+
geom_text(aes(label = teams$team), nudge_x = 2, nudge_y = 2)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
```{r, message=FALSE}
setwd("~/Desktop/STAT 133/stat133-hws-fall17/hw03/")
library(readr)
library(dplyr)
library(ggplot2)
teams<- read_csv("./data/nba2017_teams.csv")
attributes(teams)$row.names <- teams$team
rm(list = ls())
setwd("~/Desktop/STAT 133/stat133-hws-fall17/hw03/")
library(readr)
library(dplyr)
library(ggplot2)
teams<- read_csv("./data/nba2017_teams.csv")
attributes(teams)$row.names <- teams$team
summary(teams)
ggplot(teams, aes(x = reorder(team, salary), y = salary)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept = mean(teams$salary), col = "Red") +
labs(x = "Team", y = "Salary (in millions)", title = "NBA Teams ranked by Total Salary")
ggplot(teams, aes(x = reorder(team, points), y = points)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept = mean(teams$points), col = "Red") +
labs(x = "Team", y = "Total Points", title = "NBA Teams ranked by Total Points")
ggplot(teams, aes(x = reorder(team, efficiency), y = efficiency)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept = mean(teams$efficiency), col = "Red") +
labs(x = "Team", y = "Total Efficiency", title = "NBA Teams ranked by Total Efficiency")
teams1 <- teams %>%
select(points3, points2, free_throws, off_rebounds, def_rebounds, assists, steals,
blocks, turnovers, fouls)
pca <- prcomp(teams1, scale. = TRUE)
eigs <- data.frame(
eigenvalue = round(pca$sdev^2, 4),
prop = round(pca$sdev^2 / sum(pca$sdev^2), 4)
)
eigs$cumprop <- cumsum(eigs$prop)
eigs
pci <- data.frame(pca$x)
ggplot(pci, aes(x = PC1, y = PC2)) + geom_text(label = rownames(pci))
z1 <- pci %>%
select(PC1)
s1 <- (z1 - min(z1))/(max(z1) - min(z1))*100
s1$team <- attributes(s1)$row.names
ggplot(s1, aes(x = reorder(team, PC1), y = PC1)) +
geom_bar(stat = "identity") +
coord_flip() +
geom_hline(yintercept = mean(s1$PC1), col = "red") +
labs(x = "Team", y = "Firtst PC (scaled from 0 to 100)", title = "NBA Teams ranked by scaled PC1")

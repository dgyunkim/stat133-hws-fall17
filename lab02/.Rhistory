```{r}
all_gsw <- select(filter(dat, team == 'GSW'), player, height, weight)
ggplot(data = all_gsw, aes(x = height, y = weight)) + geom_point() + geom_text(aes(label = player))
```
Get a density plot of salary (for all NBA players)
```{r}
```
Get a histogram of points2 with binwidth of 50 (for all NBA players)
Get a barchart of the position frequencies (for all NBA players)
Make a scatterplot of experience and salary of all centers, and use geom_smooth() to add a regression line
Repeat the same scatterplot of experience and salary of all centers, but now use geom_smooth() to add a loess line
Make scatterplots of experience and salary faceting by position
Make scatterplots of experience and salary faceting by team
Make density plots of age faceting by team
Make scatterplots of height and weight faceting by position
Make scatterplots of height and weight, with a 2-dimensional density, geom_density2d(), faceting by position
---
title: "Lab 05"
author: "Donggyun Kim"
date: "9/28/2017"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
`r library(readr)`
`r library(dplyr)`
`r dat <- read_csv('nba2017-players.csv')`
The first five rows
```{r}
five_rows <- slice(dat, 1:5)
five_rows
```
10, 15, 20, ... , 50th rows
```{r}
x <- 2:10
f10t50 <- slice(dat, 5*x)
f10t50
```
the last 5 rows
```{r}
last_rows <- slice(dat, 437:441)
last_rows
```
height less than 70 inches tall
```{r}
height_less_70 <- filter(dat, height < 70)
height_less_70
```
GSW
```{r}
GSW <- filter(dat, team == "GSW")
GSW
```
GSW Centers
```{r}
GSW_C <- filter(dat, team == "GSW" & position == 'C')
GSW_C
```
LAL Player names
```{r}
LAL <- filter(dat, team == "LAL")
LAL_name <- select(LAL_name, player)
LAL_name
```
GSW Player names and Salary
```{r}
GSW <- filter(dat, team == "GSW" & position == 'PG')
GSW_P_S <- select(GSW, player, salary)
GSW_P_S
```
find how to select the name, age, and team, of players with more than 10 years of experience, making 10 million dollars or less.
```{r}
exp_sal <- filter(dat, experience > 10 & salary <= 1000000 )
name_age_team <- select(exp_sal, player, age, team)
name_age_team
```
find how to select the name, team, height, and weight, of rookie players, 20 years old, displaying only the first five occurrences
```{r}
rookie_20yrs <- filter(dat, experience == 0 & age == 20)
nthw <- head(select(rookie_20yrs, player, team, height, weight), 5)
nthw
```
using the data frame gsw, add a new variable product with the product of height and weight.
```{r}
gsw <- filter(dat, team == 'GSW')
gsw <- select(gsw, player, height, weight)
gsw <- slice(gsw, c(4, 8, 10, 14, 15))
mutate(gsw, product = height * weight)
```
create a new data frame gsw3, by adding columns log_height and log_weight with the log transformations of height and weight.
```{r}
gsw3 <- mutate(gsw, log_height = log(height), log_weight = log(weight))
gsw3
```
use the original data frame to filter() and arrange() those players with height less than 71 inches tall, in increasing order.
```{r}
arrange(filter(dat, height < 71))
```
display the name, team, and salary, of the top-5 highest paid players
```{r}
top_salary <- head(select(arrange(dat, desc(salary)), player, team, salary), 5)
top_salary
```
display the name, team, and points3, of the top 10 three-point players
```{r}
head(select(arrange(dat, desc(points3)), player, team, points3), 10)
```
create a data frame gsw_mpg of GSW players, that contains variables for player name, experience, and min_per_game (minutes per game), sorted by min_per_game (in descending order)
```{r}
gsw_mpg <- select(filter(arrange(dat, desc(minutes)), team == 'GSW'), player, experience, min_per_game = minutes)
gsw_mpg
```
use summarise() to get the largest height value.
```{r}
summarise(dat, largest_height = max(height))
```
use summarise() to get the standard deviation of points3
```{r}
summarise(dat, sd_points3 =sd(points3))
```
use summarise() and group_by() to display the median of three-points, by team.
```{r}
summarise(group_by(dat, team), median_points3 = median(points3))
```
display the average triple points by team, in ascending order, of the bottom-5 teams (worst 3pointer teams)
```{r}
tail(arrange(summarise(group_by(dat, team), average_3points = mean(points3)), desc(average_3points)), 5)
```
obtain the mean and standard deviation of age, for Power Forwards, with 5 and 10 years (including) years of experience.
```{r}
summarise(filter(dat, experience >= 5 & experience <= 10 & position == 'PF') , mean_PF = mean(age), sd_PF = sd(age))
```
Use the data frame gsw to make a scatterplot of height and weight
```{r}
ggplot(data = gsw, aes(x= height, y = weight)) + geom_point()
```
Find out how to make another scatterplot of height and weight, using geom_text() to display the names of the players
```{r}
ggplot(data = gsw, aes(x= height, y = weight)) + geom_point() + geom_text(aes(label = player))
```
Get a scatter plot of height and weight, for ALL the warriors, displaying their names with geom_label()
```{r}
all_gsw <- select(filter(dat, team == 'GSW'), player, height, weight)
ggplot(data = all_gsw, aes(x = height, y = weight)) + geom_point() + geom_text(aes(label = player))
```
Get a density plot of salary (for all NBA players)
```{r}
```
Get a histogram of points2 with binwidth of 50 (for all NBA players)
Get a barchart of the position frequencies (for all NBA players)
Make a scatterplot of experience and salary of all centers, and use geom_smooth() to add a regression line
Repeat the same scatterplot of experience and salary of all centers, but now use geom_smooth() to add a loess line
Make scatterplots of experience and salary faceting by position
Make scatterplots of experience and salary faceting by team
Make density plots of age faceting by team
Make scatterplots of height and weight faceting by position
Make scatterplots of height and weight, with a 2-dimensional density, geom_density2d(), faceting by position
log(-2)
dat <- data.frame()
dat <- data.frame(
col1 = LETTERS[1:5],
col2 = seq(from = 10, to = 50, by = 10),
col3 = c(TRUE, TRUE, FALSE, TRUE, FALSE)
)
dat
dat
dat$1
dat[1]
dat[[1]]
dat <- data.frame(
col1 = LETTERS[1:5],
col2 = seq(from = 10, to = 50, by = 10),
col3 = c(TRUE, TRUE, FALSE, TRUE, FALSE),
stringsAsFactors = FALSE
)
dat
class(dat$col1)
class[[1]]
dat[[1]]
dat[1]
dat[1, ]
dat[,1]
dat[1]
dat[col1]
dat["col1"]
dat$col1
dat$col4
name <- c("first", "last", "gender", "born", "spell")
df <- data.frame(
)
first <- c("Harry", "Hermione", "Ron", "Luna")
last <- c("Potter", "Granger", "Weasley", "Lovegood")
gender <- c("male", "female", "male", "female")
born <- c(1980, 1979, 1980, 1981)
spell <- c("sectumsempra", "alohomora", "riddikulus", "episkey")
df <- data.frame(first, last, gender, born, spell, stringAsFactor = FALSE)
df
df <- data.frame(first, last, gender, born, spell, stringsAsFactor = FALSE)
df
df <- data.frame(first, last, gender, born, spell, stringsAsFactors = FALSE)
df
df[c(1, 0, 1, 0)]
df[c(1, 0, 1, 0), ]
df[c(TRUE, FALSE, TRUE, FALSE), ]
df[c(TRUE, FALSE, TRUE, FALSE) ]
df[df[,4] == 1980,]
df[df$born == 1980]
df[df$born == 1980]
df$born == 1980
df[df$born == 1980,]
df[df$born == 1980]
df[df$born == 1980,]
df[, df$born == 1980]
1 & 2
df[1:3, TRUE]
df[1:3, FALSE]
df[1:3, ]
df[1:3, 1:2]
df[, c(5,1)]
rm(dat)
ls()
df
my_list <- list(
col1 = LETTERS[1:5],
col2 = seq(from = 10, to = 50, by = 10),
col3 = c(TRUE, TRUE, FALSE, TRUE, FALSE)
)
my_table2 <- data.frame(my_list)
my_table2
my_table1 <- data.frame(
col1 = LETTERS[1:5],
col2 = seq(from = 10, to = 50, by = 10),
col3 = c(TRUE, TRUE, FALSE, TRUE, FALSE)
)
my_table1
class(my_table1)
class(my_table2)
?attribute
?attributes
df
df[c("last", "first", "spell", "born")]
df
names(df[2]) <- "Family"
df
df[2]
names(df)
arrtibutes(df)
attributes(df)
attributes(df)$names[2] <- "Family"
df
attributes(df)
attributes(df)$row.names[2] <- "Two"
df
df
dfdf
df
attributes(df)$class <- list()
?order
?sort
?%>%
??%>%
?dplyr
library(dplyr)
?%>%
?dplyr
df
df%>% filter(gender == "female")
df
sw
df
filter(genter == "male")
filter(gender == "male")
filter(gender)
filter(dt, gender == "male")
filter(df, gender == "male")
df
arrange(select(df, first, gender, born), born)
df%>%select(first, gender, born)%>%arrange(born)
df%>%select(born)$>$summarise(max_born = max(born))
df%>%select(born)%>%summarise(max_born = max(born))
df
df%>%group_by(gender)%>%summarise(max_born = max(born))
summarise(df, group_by(gender), max_born = max(born))
summarise(group_by(df, gender), max_born = max(born))
3xalqo <- 12
_30d0_dl <- 12
.sdowk <- 123213
.sdowk3
.sdowk
.var_name <- "name"
.var_name
VarName <- yes
VarName <- 123
var-name <- 123
math+doq <- 12
log10
log(10)/(5/2 - log(2/3))
(1/2)^10
log(3/2)
(log(1/10)-1/2)/log(2/3)
(log(1/10) - 5) / log(2/3)
exp(-10)
exp(-10)*1000
14!
factanal(14)
factorial(14)
10^14/factorial(14)
exp(-10)*1147
(2*log(1.4)+3)*0.1
2*log(1)+1
2.4*log(1.2)+1.2
2.4*log(1.2)+1.2 - 0.5465
1.2625 - 1.0000
(1.2625 - 1.0000)/2
(1.2625 - 1.0000)/0.2
(1.6595-1.2625)/0.2
(1.6595-1.2625)
(1.6595-1.2625)/0.2
2.4*log(1.2)+1.2 - 1.985
2.8*log(1.4)+1.4 - 1.985
exp(-2)
exp(0.4)
exp(-0.4)
-1.645*sqrt(1/12)+1/2
(-1.645*sqrt(1/12)+1/2)*2
1/[(-1.645*sqrt(1/12)+1/2)*2]
1/((-1.645*sqrt(1/12)+1/2)*2)
1/((-1.645*sqrt(1/12)+1/2)*2)*2
1/(1/((-1.645*sqrt(1/12)+1/2)*2)*2)
7^(1/5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/STAT 133/stat133-hws-fall17/hw01/")
load("data/nba2017-salary-points.RData")
new_salary <- salary/1000000
round(new_salary, digits=2)
ls
setwd("~/Desktop/STAT 133/stat133-hws-fall17/hw01/")
load("data/nba2017-salary-points.RData")
setwd("~/Desktop/STAT 133/stat133-hws-fall17/hw01/")
load("data/nba2017-salary-points.RData")
ls
ls()
setwd("~/Desktop/STAT 133/stat133-hws-fall17/hw01/")
load("data/nba2017-salary-points.RData")
ls()
ls()
{"first"; 1; 2; 3; "last"}
x <- {5; 20}
x
x <- {
20
30
}
x
{
one <- 1
pie <- 293
cha <- "cowi"
}
one
pie
cha
z <- {x = 20; y = 50}
x
y
z
z <- {x = 20; y = 50; x+y}
z
x
y
z
y <- 1 # Change this value!
if (y > 0) {
print("positive")
} else if (y < 0) {
print("negative")
} else {
print("zero?")
}
y <- 0
?scale
65-52.61
12.39/19.86
pnorm(0.6238672)
pnorm(0.6238671)
getwd()
setwd("~/Desktop/STAT 133/stat133-hws-fall17/lab02/")
rdata <- "https://github.com/ucb-stat133/stat133-fall-2017/raw/master/data/nba2017-salary-points.RData"
download.file(url = rdata, destfile = 'nba2017-salary-points.RData')
knitr::opts_chunk$set(echo = TRUE)
load('nba2017-salary-points.RData')
typeof(player)
mode(points)
class(position)
str(team)
object.size(salary)
length(points3)
head(points1)
tail(points2)
summary(team)
typeof(player)
mode(points)
class(position)
str(team)
object.size(salary)
length(points3)
head(points1)
tail(points2)
summary(team)
is.vector(player)
is.vector(team)
is.atomic(player)
is.atomic(team)
is.factor(team)
is.factor(player)
four <- player[1:4]
four
four[0]
four[-1]
four[c(-1,-2,-3)]
four[5]
four[c(1,2,2,3,3,3)]
player[seq(2, length(player), 2)]
salayer[seq(1, length(salary), 2)] # Odd elements in `salary`
salary[seq(1, length(salary), 2)] # Odd elements in `salary`
team[seq(5, length(team), 5)] # Multiples of 5
89*5
89*5 - 4
points[seq(10, length(points), 10)]
team[seq(440, 2, 2)]
team[seq(440, 2, -2)]
team[440]
player[which(team == "GSW" & position == "C")]
player[which(team == "GSW" & "LAK")]
player[which(team == "GSW" & tema == "LAK")]
player[which(team == "GSW" & team == "LAK")]
player[which(team == "GSW" | team == "LAK")]
player[which(team == "GSW" | team == "LAL")]
player[which(team == "GSW" & team == "LAL")]
player[which(team == "GSW" | team == "LAL")]
paleyr[which(team == "LAL" & (position == "PG" | position == "SG"))]
player[which(team == "LAL" & (position == "PG" | position == "SG"))]
player[team == "LAL" & position == "PG"]
player[team == "LAL" & position == "SG"]
warriors_player <- player[team == "GSW"]
warriors_salary <- salary[player == warriors_player]
warriors_salary <- salary[team == "GSW"]
warriors_points <- points[team == "GSW"]
warriors_salary["Andre Iguodala"]
names(warriors_salary) <- warriors_player
warriors_salary["Andre Iguodala"]
warriors_salary[c("Stephen Curry", "Kevin Durant")]
plot(points, salary)
log_points <- log(points)
log_salary <- log(salary)
plot(log_points, log_salary)
text(log_points, log_salary, labels = player)
plot(log_points, log_salary)
text(log_points, log_salary, labels = player)
plot(log_points, log_salary)
text(log_points, log_salary, labels = player)
plot(points, salary)
log_points <- log(points)
log_salary <- log(salary)
plot(log_points, log_salary)
text(log_points, log_salary, labels = player)
plot(points, salary)
log_points <- log(points)
log_salary <- log(salary)
plot(log_points, log_salary)
text(log_points, log_salary, labels = player)
plot(log_points, log_salary)
text(log_points, log_salary, labels = abbreviate(player))
salary_millions <- salary/100000
is.factor(team)
is.factor(position)
position_fac(position)
position_fac <- factor(position)
table(postion_fac)
table(position_fac)
position_fac[1:5]
position_fac[team == "GSW"]
position_fac[salary_millions > 15]
table(position_fac[salary_millions > 15])
??frequency
??relative frequency
??relative
prop.table(table(team[position_fac[SG]]))
prop.table(table(team[position_fac["SG""]]))
prop.table(table(team[position_fac["SG"]]))
prop.table(table(team[position_fac[SG]]))
position_fac
position_fac[SG]
position_fac == SG
prop.table(table(team[position_fac == "SG"))
position_fac == SG
position_fac == "SG"
prop.table(table(team[position_fac == "SG"]))
plot(points, salary, col = position_fac)
col = position_fac
col
plot(points, salary, col = position_fac)
?cok
?col
?pkot
?plot
plot(points, salary, col = position_fac, cex = 2.5)
plot(points, salary, col = position_fac, cex = 1.5)
plot(points, salary, col = position_fac, cex = 1.5, pch = 2)
plot(points, salary, col = position_fac, cex = 1.5, pch = 19)
plot(points, salary, col = position_fac, cex = 1.5, pch = 21)
